/// <reference types="node" />
import { Word } from "./Word";
import { Sequence } from "./Sequence";
export declare class Packet {
    static MAX_SIZE: number;
    static SEQUENCE_OFFSET: number;
    static SEQUENCE_LEN: number;
    static SIZE_OFFSET: number;
    static SIZE_LEN: number;
    static WORDCOUNT_OFFSET: number;
    static WORDCOUNT_LEN: number;
    static WORDS_OFFSET: number;
    readonly sequence: Sequence;
    readonly words: Word[];
    constructor(props: Packet.CreateOptions);
    /** creates a buffer from the packet */
    toBuffer(): Buffer;
    /** parses a packet from buffer */
    static from(buffer: Buffer): Packet;
    /** retrieves an array of buffers */
    static getPacketBuffers(buffer: Buffer): {
        buffers: Buffer[];
        remainder: Buffer;
    };
    /** returns an estimated byte size for the packet */
    static getSizeDirty(buffer: Buffer): number;
}
export declare namespace Packet {
    interface CreateOptions {
        words: (Word | string)[];
        sequence: Sequence;
    }
}
//# sourceMappingURL=Packet.d.ts.map