/// <reference types="node" />
export declare class Sequence {
    static MAX_SEQUENCE_NUMBER: number;
    readonly sequence: number;
    readonly origin: Sequence.Origin;
    readonly type: Sequence.Type;
    constructor(props: Sequence.SequenceOptions);
    /** retrieves the next sequence number */
    nextSequence(opts: Sequence.NextSequenceOptions): Sequence;
    /** returns a copy of the word as buffer */
    toBuffer(): Buffer;
    /** parses a sequence from a buffer */
    static from(buffer: Buffer): Sequence;
    static setOrigin(sequence: Buffer, origin: Sequence.Origin): void;
    static setType(sequence: Buffer, type: Sequence.Type): void;
    static getOrigin(uint: number): Sequence.Origin;
    static getType(uint: number): Sequence.Type;
    static getSequenceNumber(uint: number): number;
}
export declare namespace Sequence {
    enum Mask {
        ORIGIN = 2147483648,
        TYPE = 1073741824
    }
    enum Origin {
        SERVER = 1,
        CLIENT = 0
    }
    enum Type {
        REQUEST = 0,
        RESPONSE = 1
    }
    type NextSequenceOptions = Omit<SequenceOptions, "sequence">;
    interface SequenceOptions {
        sequence: number;
        type: Type;
        origin: Origin;
    }
}
//# sourceMappingURL=Sequence.d.ts.map