"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sequence = void 0;
class Sequence {
    constructor(props) {
        this.origin = props.origin;
        this.type = props.type;
        this.sequence = props.sequence;
    }
    /** retrieves the next sequence number */
    nextSequence(opts) {
        let seq = this.sequence + 1;
        return new Sequence({
            sequence: seq > Sequence.MAX_SEQUENCE_NUMBER ? 0 : seq,
            ...opts
        });
    }
    /** returns a copy of the word as buffer */
    toBuffer() {
        let sequence = this.sequence;
        const buffer = Buffer.alloc(4);
        buffer.writeUInt32LE(sequence, 0);
        Sequence.setOrigin(buffer, this.origin);
        Sequence.setType(buffer, this.type);
        return buffer;
    }
    /** parses a sequence from a buffer */
    static from(buffer) {
        const uint = buffer.readUInt32LE(0);
        return new Sequence({
            origin: Sequence.getOrigin(uint),
            type: Sequence.getType(uint),
            sequence: Sequence.getSequenceNumber(uint)
        });
    }
    static setOrigin(sequence, origin) {
        let seq = sequence.readInt32LE(0);
        if (origin) {
            seq |= Sequence.Mask.ORIGIN;
        }
        else {
            seq &= ~Sequence.Mask.ORIGIN;
        }
        sequence.writeInt32LE(seq, 0);
    }
    static setType(sequence, type) {
        let seq = sequence.readInt32LE(0);
        if (type) {
            seq |= Sequence.Mask.TYPE;
        }
        else {
            seq &= ~Sequence.Mask.TYPE;
        }
        sequence.writeInt32LE(seq, 0);
    }
    static getOrigin(uint) {
        if ((uint & Sequence.Mask.ORIGIN) === Sequence.Mask.ORIGIN) {
            return Sequence.Origin.CLIENT;
        }
        else {
            return Sequence.Origin.SERVER;
        }
    }
    static getType(uint) {
        if ((uint & Sequence.Mask.TYPE) === Sequence.Mask.TYPE) {
            return Sequence.Type.RESPONSE;
        }
        else {
            return Sequence.Type.REQUEST;
        }
    }
    static getSequenceNumber(uint) {
        return uint & ~(Sequence.Mask.ORIGIN | Sequence.Mask.TYPE);
    }
}
exports.Sequence = Sequence;
Sequence.MAX_SEQUENCE_NUMBER = 0x3FFFFFFF;
(function (Sequence) {
    let Mask;
    (function (Mask) {
        Mask[Mask["ORIGIN"] = 2147483648] = "ORIGIN";
        Mask[Mask["TYPE"] = 1073741824] = "TYPE";
    })(Mask = Sequence.Mask || (Sequence.Mask = {}));
    let Origin;
    (function (Origin) {
        Origin[Origin["SERVER"] = 1] = "SERVER";
        Origin[Origin["CLIENT"] = 0] = "CLIENT";
    })(Origin = Sequence.Origin || (Sequence.Origin = {}));
    let Type;
    (function (Type) {
        Type[Type["REQUEST"] = 0] = "REQUEST";
        Type[Type["RESPONSE"] = 1] = "RESPONSE";
    })(Type = Sequence.Type || (Sequence.Type = {}));
})(Sequence = exports.Sequence || (exports.Sequence = {}));
//# sourceMappingURL=Sequence.js.map