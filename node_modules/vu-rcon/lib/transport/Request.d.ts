import { Packet } from "./protocol/Packet";
import { Word } from "./protocol/Word";
export declare class Request<T = string[]> {
    static RESPONSE_OK: string;
    readonly packet: Packet;
    private sendable;
    private response?;
    priorized: boolean;
    private fulfill;
    private reject;
    private responseParams;
    private formater;
    private stack;
    private callbacks;
    constructor(options: Request.Options);
    get sequenceNumber(): number;
    /**
     * marks the request as a priority request
     * this will make the query send this packet first
     * and withhold all other queued packets till this has finnished
     */
    priorize(): this;
    format(cb: Request.ResponseFormater<T>): this;
    getResponse(): string;
    onResolved(cb: (data: T) => void): void;
    getContentWords(): Word[];
    isOk(): boolean;
    getResponseContent(): T;
    setResponse(packet: Packet): any;
    expect(parameter: Request.ResponseParameter): this;
    send(): Promise<T>;
}
export declare namespace Request {
    interface Options {
        packet: Packet;
        send: Send;
    }
    type Send = (req: Request<any>) => void;
    type ResponseFormater<T> = (words: Word[]) => T;
    type ResponseParameter = Parameter | Subset;
    enum Parameter {
        STRING = 0,
        BOOLEAN = 1,
        HEXSTRING = 2,
        PASSWORD = 3,
        FILENAME = 4,
        CLANTAG = 5,
        PLAYER_NAME = 6,
        GUID = 7,
        TEAM_ID = 8,
        SQUAD_ID = 9
    }
    enum Subset {
        TIMEOUT = 0,
        ID_TYPE = 1,
        PLAYER_INFO_BLOCK = 2,
        TEAM_SCORES = 3,
        IP_PORT_PAIR = 4,
        MAP_LIST = 5,
        UNLOCK_MODE = 6
    }
}
//# sourceMappingURL=Request.d.ts.map