"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
class Request {
    constructor(options) {
        this.priorized = false;
        this.responseParams = [];
        this.formater = words => words.map(w => w.toString());
        this.stack = (new Error()).stack;
        this.callbacks = [];
        this.packet = options.packet;
        this.sendable = options.send;
    }
    get sequenceNumber() {
        return this.packet.sequence.sequence;
    }
    /**
     * marks the request as a priority request
     * this will make the query send this packet first
     * and withhold all other queued packets till this has finnished
     */
    priorize() {
        this.priorized = true;
        return this;
    }
    format(cb) {
        this.formater = cb;
        return this;
    }
    getResponse() {
        if (!this.response)
            throw new Error("no response has been received yet");
        return this.response.words[0].toString();
    }
    onResolved(cb) {
        if (this.response)
            return cb(this.getResponseContent());
        this.callbacks.push(cb);
    }
    getContentWords() {
        if (!this.response)
            throw new Error("no response has been received yet");
        return this.response.words.slice(1, this.response.words.length);
    }
    isOk() {
        return this.getResponse() === Request.RESPONSE_OK;
    }
    getResponseContent() {
        return this.formater(this.getContentWords());
    }
    setResponse(packet) {
        this.response = packet;
        if (this.isOk()) {
            const res = this.getResponseContent();
            this.fulfill(res);
            this.callbacks.forEach(cb => cb(res));
            return;
        }
        const error = new Error(`${this.getResponse()}: ${this.packet.words.join(" ")}`);
        if (this.stack && error.stack) {
            const [_, ...stack] = this.stack.split("\n");
            error.stack = `${error.stack.split("\n")[0]}\n${stack.join("\n")}`;
        }
        return this.reject(error);
    }
    expect(parameter) {
        this.responseParams.push(parameter);
        return this;
    }
    send() {
        return new Promise((fulfill, reject) => {
            this.stack = (new Error()).stack;
            this.fulfill = fulfill;
            this.reject = reject;
            this.sendable(this);
        });
    }
}
exports.Request = Request;
Request.RESPONSE_OK = "OK";
(function (Request) {
    let Parameter;
    (function (Parameter) {
        Parameter[Parameter["STRING"] = 0] = "STRING";
        Parameter[Parameter["BOOLEAN"] = 1] = "BOOLEAN";
        Parameter[Parameter["HEXSTRING"] = 2] = "HEXSTRING";
        Parameter[Parameter["PASSWORD"] = 3] = "PASSWORD";
        Parameter[Parameter["FILENAME"] = 4] = "FILENAME";
        Parameter[Parameter["CLANTAG"] = 5] = "CLANTAG";
        Parameter[Parameter["PLAYER_NAME"] = 6] = "PLAYER_NAME";
        Parameter[Parameter["GUID"] = 7] = "GUID";
        Parameter[Parameter["TEAM_ID"] = 8] = "TEAM_ID";
        Parameter[Parameter["SQUAD_ID"] = 9] = "SQUAD_ID";
    })(Parameter = Request.Parameter || (Request.Parameter = {}));
    let Subset;
    (function (Subset) {
        Subset[Subset["TIMEOUT"] = 0] = "TIMEOUT";
        Subset[Subset["ID_TYPE"] = 1] = "ID_TYPE";
        Subset[Subset["PLAYER_INFO_BLOCK"] = 2] = "PLAYER_INFO_BLOCK";
        Subset[Subset["TEAM_SCORES"] = 3] = "TEAM_SCORES";
        Subset[Subset["IP_PORT_PAIR"] = 4] = "IP_PORT_PAIR";
        Subset[Subset["MAP_LIST"] = 5] = "MAP_LIST";
        Subset[Subset["UNLOCK_MODE"] = 6] = "UNLOCK_MODE";
    })(Subset = Request.Subset || (Request.Subset = {}));
})(Request = exports.Request || (exports.Request = {}));
//# sourceMappingURL=Request.js.map